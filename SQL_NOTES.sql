CREATE DATABASE LEARN;
USE LEARN;
CREATE TABLE STUD
(
ID INT PRIMARY KEY,
NAAM VARCHAR(30),
DEPT VARCHAR(30),
MARKS INT ,
PLACE VARCHAR(30)
);
INSERT INTO STUD (ID,NAAM,DEPT,MARKS,PLACE) VALUES
( 1,"LAVANYA","DS",92,"GUNTUR"),
( 2,"LAKSHMI","DS",82,"GUNTUR"),
( 3,"PRAVEEN","AI",35,"TENALI"),
( 4,"DATTA","ECE",48,"PURAM"),
( 5,"JOE","IT",25,"REPLALLE");
SELECT * FROM STUD;
SELECT distinct PLACE FROM STUD;
                      -- crating a primary KEY
USE LEARN;                      
CREATE TABLE EMP_01
(
ID INT ,
NAAM VARCHAR(30) ,
DEPT VARCHAR(20),
SALARY INT DEFAULT 25000 ,     -- SETTING SALARY DEFAUTLY AS 25K
MOBILE INT UNIQUE,
LOCATION  VARCHAR(10),
PRIMARY KEY(ID,NAAM)
);
-- HERE ,THE ID,NAAM CAN HAVE DUPLICATES& NULL VALUES BUT 
-- BOTH TOGHTER SHOULD ONLY HAVE UNIQUE VALUES(PRIMARY KEY DECLARATION FOR  2 COLMS)

-- SYNTAX FOR FOREGIN KEY :  FOREIGN KEY (COL_NAME) REFERENCES OTHER_TABLE_NAME(COL_NAME)

USE LEARN;
CREATE TABLE SAMPLE
(
CITY VARCHAR(20),
AGE INT CHECK(AGE>=18 )    --  WE CAN ALSO WRITE CHECK(AGE>=18 AND CITY="GUNTUR")
);
                                                     --  WHERE COMMANDS
SELECT * FROM STUD
WHERE MARKS>50;

SELECT DISTINCT PLACE FROM STUD;

SELECT * FROM STUD
WHERE MARKS>50 AND DEPT="AI";


SELECT * FROM STUD;

SELECT * FROM STUD
WHERE MARKS>50 AND (PLACE="GUNTUR" OR DEPT="AI");

SELECT * FROM STUD
WHERE MARKS BETWEEN 80 AND 90;    -- INCLUDING 80 AND 90.GIVES MAEKS BETWEEN 80 AND 90

SELECT * FROM STUD 
WHERE PLACE IN("TENALI","REPLALLE"); -- RETURNS THE ROWS WHERE PEOPLE BELONG TO TENALI AND REPLALLE

SELECT * FROM STUD 
WHERE DEPT NOT IN("IT","AI");

SELECT * FROM STUD LIMIT 3; -- GIVES ONLY SPECIFIED ROWS FROM STARTING

SELECT * FROM STUD 
WHERE MARKS<50 LIMIT 3;

-- ORDER BY CLAUSE

SELECT * FROM STUD 
ORDER BY MARKS  DESC  LIMIT 3;  -- FOR ASECNDING USE "ASC" AND FOR DESCEND USE "DESC"

SELECT * FROM STUD
ORDER BY ID DESC ;

SELECT * FROM STUD
ORDER BY PLACE ASC;

                               -- AGREEGATE FUNCTIONS == PERFORM CALCULATIONS ON SET OF VALUES AND RETURN SINGLE VALUE
                               
USE LEARN;
CREATE TABLE EMPE
( ID INT PRIMARY KEY,NAAM VARCHAR(20),SAL INT DEFAULT 25000,LOC VARCHAR(10),PHONE INT NOT NULL);

INSERT INTO EMPE (ID, NAAM, SAL, LOC, PHONE) VALUES
(1, 'LAVANYA', 32700, 'HYD', 4492),
(2, 'LAKSHMI', 45876, 'HYD', 4482),
(3, 'JOSHNA', 37700, 'PUNE', 4483),
(4, 'CHAITANYA', 60000, 'CHENNAI', 4484),
(5, 'PAVAN', 54700, 'RANCHI', 4485),
(6, 'PRAVEEN', 32700, 'CHENNAI', 4435),
(7, 'JAANU', 20000, 'BANG', 4499),
(8, 'TARUN', 67700, 'RANCHI', 4486),
(9, 'VIBES', 22700, 'AMAR', 4481),
(10, 'VAMSI', 52700, 'BANG', 4491);
SELECT * FROM EMPE;
SELECT  MIN(PHONE),MAX(SAL),MIN(SAL),COUNT(SAL),SUM(SAL),AVG(SAL) FROM EMPE;
                                                                            -- GROUP BY CLAUSE
SELECT LOC,COUNT(SAL) FROM EMPE
GROUP BY LOC ;                                                                            

SELECT LOC,COUNT(SAL) FROM EMPE
GROUP BY LOC,NAAM;  

SELECT  NAAM,SAL FROM EMPE
GROUP BY SAL,NAAM;

SELECT LOC,AVG(SAL) FROM EMPE
GROUP BY LOC,SAL 
ORDER BY   SUM(SAL) ASC;
 SELECT * FROM EMPE;
                                                  -- HAVING CLAUSE

SELECT LOC,COUNT(SAL) FROM EMPE
GROUP BY LOC
HAVING MAX(SAL)>30000;

SELECT LOC,COUNT(NAAM)  FROM EMPE
GROUP BY LOC
HAVING  MAX(SAL)>=50000
ORDER BY LOC DESC;
 
SELECT LOC,SAL FROM EMPE
WHERE SAL>=50000 AND LOC="HYD";


USE LEARN;
CREATE TABLE ST (
    NAAM VARCHAR(30),
    ID INT PRIMARY KEY,
    DEPT VARCHAR(50),
    MARKS DECIMAL(5, 2),
    GRADE CHAR(1),
    LOC VARCHAR(30)
);

INSERT INTO ST(NAAM, ID, DEPT, MARKS, GRADE, LOC) VALUES
('Alice Johnson', 101, 'Computer Science', 88.50, 'A', 'New York'),
('Bob Smith', 102, 'Mathematics', 75.00, 'B', 'Los Angeles'),
('Cathy Lee', 103, 'Physics', 92.25, 'A', 'Chicago'),
('David Brown', 104, 'Chemistry', 67.50, 'C', 'Houston'),
('Eva White', 105, 'Biology', 81.00, 'B', 'Phoenix'),
('Frank Black', 106, 'Engineering', 79.75, 'B', 'Philadelphia'),
('Grace Green', 107, 'Literature', 85.00, 'A', 'San Antonio'),
('Henry Blue', 108, 'History', 70.50, 'C', 'San Diego'),
('Isabel Orange', 109, 'Art', 95.00, 'A', 'Dallas'),
('Jack Purple', 110, 'Economics', 62.00, 'D', 'San Jose');

SELECT * FROM   ST;

SET SQL_SAFE_UPDATES=0;


                                  -- TABLE QUERIES
-- UPDATE ==TO UPDATE ALREADY EXISISTING ROWS
UPDATE ST
SET GRADE="O"
WHERE GRADE="A";

UPDATE ST
SET MARKS=45.43
WHERE ID="105";

UPDATE ST 
 SET GRADE="B"
 WHERE MARKS BETWEEN 75 AND 80;

select *  FROM ST;
UPDATE ST
SET GRADE="C"
WHERE MARKS BETWEEN 60 AND 75 ;

UPDATE ST
SET MARKS=MARKS+1;

-- DELETE =DELETES A PARTICULAR ROW OR A TABLE DATA(TABLE STRUCTURE REMAINS SAME.ONCE DELETED CAN'T RETRIVE THEM BACK.
DELETE  FROM STUD;
SELECT * FROM STUD;

DELETE FROM ST
WHERE ID=110;

select *  FROM ST;

USE LEARN;
CREATE TABLE STUDENT (
    id INT PRIMARY KEY,
    nAAM VARCHAR(100),
    depT VARCHAR(50),
    marks DECIMAL(5, 2),
    loc VARCHAR(100)
);
INSERT INTO STUDENT (id, nAAM, depT, marks, loc) VALUES
(1, 'Alice Johnson', 'Computer Science', 88.50, 'New York'),
(2, 'Bob Smith', 'Mathematics', 75.00, 'Los Angeles'),
(3, 'Cathy Lee', 'Physics', 92.25, 'Chicago'),
(4, 'David Brown', 'Chemistry', 67.50, 'Houston'),
(5, 'Eva White', 'Biology', 81.00, 'Phoenix');

CREATE TABLE COURSE (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(100),
    credits INT,
    semester VARCHAR(10),
    student_id INT,
    FOREIGN KEY (student_id) REFERENCES STUDENT(id)
);

INSERT INTO COURSE (course_id, course_name, credits, semester, student_id) VALUES
(101, 'Data Structures', 3, 'Fall', 1),
(102, 'Calculus', 4, 'Spring', 2),
(103, 'Quantum Mechanics', 3, 'Fall', 3),
(104, 'Organic Chemistry', 4, 'Spring', 4),
(105, 'Genetics', 3, 'Fall', 5);

SELECT * FROM STUDENT;
SELECT * FROM COURSE;

DROP TABLE STUDENT;
DROP TABLE COURSE;

USE LEARN;

                                          -- CASCADING
CREATE DATABASE SEEK; 
USE SEEK;

CREATE TABLE DEP
(
ID INT PRIMARY KEY,
NAAM VARCHAR(10)
);
INSERT INTO DEP (ID,NAAM) VALUES
(101,"ENGLISH"),
(102,"IT");
select* FROM DEP;

UPDATE  DEP 
SET ID=103 
WHERE NAAM="IT";

CREATE TABLE TE
(
ID INT PRIMARY KEY,
NAAM VARCHAR(10),
DEPT_ID INT,
FOREIGN KEY(DEPT_ID) references DEP(ID)
ON UPDATE cascade
ON delete CASCADE
);
INSERT INTO TE VALUES
(101,"LAVS",101),
(102,"LUCK",102),
(103,"LAVS",101);


 ALTER TABLE TE
 ADD  COLUMN MARKS INT;

SELECT * FROM TE;
USE  SEEK;

CREATE TABLE STUDENT (
    ID INT PRIMARY KEY,
    NAME VARCHAR(100),
    MARKS DECIMAL(5, 2)
);
INSERT INTO STUDENT (ID, NAME, MARKS) VALUES
(1, 'Alice Johnson', 85.50),
(2, 'Bob Smith', 78.00),
(3, 'Cathy Lee', 92.25),
(4, 'David Brown', 67.50),
(5, 'Eva White', 88.00);

SELECT * FROM STUDENT;

ALTER TABLE STUDENT
ADD LOC VARCHAR(30);   -- ADDS A NEW COLUMN

ALTER TABLE STUDENT
DROP LOC ; -- DROPS COLUMN FROM STRUCTURE PERMENANTLY

ALTER TABLE STU
RENAME  ST;   -- USED TO CHANGE    NAME OF THE TABLE

ALTER TABLE ST
CHANGE NAME  NAAM VARCHAR(30) ; -- USED  TO CHANGE COLUMN NAME

ALTER TABLE ST
MODIFY MARKS INT; -- CHNAGES THE DATATYPES/CONSTARINT  OF A COLUMN


ALTER  TABLE ST
ADD AGE INT NOT NULL DEFAULT(18);


--  DROP : DELETES ENTIRE TABLE/COUMN DATA WITH STRUECTURE 
--  DELETE : DELETES A ROW  DATA  PERMENANTLY
--  TRUNCATE : DELETES A  COLUMN/TABLE DATA BUT STRUCTURE REMAINS SAME

truncate TABLE  ST;
select* FROM ST;

USE SEEK;
CREATE TABLE PUP (
    ID INT PRIMARY KEY,
    NAME VARCHAR(100),
    MARKS DECIMAL(5, 2)
);
INSERT INTO PUP (ID, NAME, MARKS) VALUES
(1, 'Alice Johnson', 85.50),
(2, 'Bob Smith', 78.00),
(3, 'Cathy Lee', 92.25),
(4, 'David Brown', 67.50),
(5, 'Eva White', 88.00);


DELETE  FROM PUP
WHERE MARKS<70;

ALTER TABLE PUP
CHANGE NAME NAAM VARCHAR(100);

SELECT * FROM PUP;

ALTER TABLE PUP
ADD AGE INT  DEFAULT 10;

ALTER TABLE PUP
DROP AGE;


                                -- JOINS
 -- JOINS USED TO COMBINE ROWS FROM 2 OR MORE TABLES ,BASED ON RELATED COLUMNS ( COLUMN NAMES NO NEEED TO BE SAME IN BOTH TABLES).
--  NO NEED TO HAVE ANY KIND OF RELATION BETWEEN TWO TABLES SUCH AS FOREIGN KEY.
 -- SUPPOSE WE HAVE TWO TABLES A(LEFT TABLE) & B(RIGHT TABLE)
-- INNER JOIN = INTERSECTION
-- LEFT  OUTER JOIN= GIVES ALL COLUMNS FROM A AND MATCHED COLUMNS FROM B
-- RIGHT OUTER JOIN =GIVES ALL COLUMNS FROM B AND MATCHED COLUMNS FROM A
-- OUTER JOIN= UNION

USE SEEK;

CREATE TABLE COL
(
ID INT PRIMARY KEY, NAAM VARCHAR(10)
);
INSERT INTO COL (ID,NAAM) VALUES
(1,"LAV"),
(2,"LUCKY"),
(3,"CHOTA");
SELECT * FROM COL;

USE SEEK;

CREATE TABLE COU
(
ID INT PRIMARY KEY, COURSE VARCHAR(10)
);
INSERT INTO COU (ID,COURSE) VALUES
(1,"IT"),
(2,"ECE"),
(3,"CSE");
SELECT * FROM COL;
SELECT * FROM COU;

SELECT ID,NAAM,COURSE FROM COL AS C INNER JOIN COU
ON C.ID=COU.C_ID;
--  WE CAN GIVE ALIAS NAME FIR TABLE(IF TABLE IS HAVING LONG NAME) 
-- ALIA NAME HAS TO BE USED TO PERFORM JOIN OPERATIONS


ALTER TABLE COU
CHANGE ID C_ID INT;

SELECT * FROM COU;

SELECT * FROM COL AS A  LEFT JOIN COU AS B
ON A.ID=B.C_ID;
 
 INSERT INTO COL VALUES
 (4,"BHEEM"),
 (5,"NOBITA");
 
 
SELECT * FROM COL AS A  RIGHT JOIN COU AS B
ON A.ID=B.C_ID;


SELECT * FROM COL AS A  LEFT JOIN  COU AS B
ON A.ID=B.C_ID
UNION
SELECT * FROM COL AS A  RIGHT JOIN COU AS B
ON A.ID=B.C_ID;
-- BY DEFAULT THERE IS NO UNION JOIN IN MYSQL.SO,WE PERFORM,UNION OF BOTH LEFT AND RIGHT JOINS

                                -- RIGHT AND LEFT EXCLUSIVE JOINS 
-- LEFT EXCLUSIVE JOIN= RETURNS ROW VALUES  WHICH WORKS OPPISTE TO RIGHT INNER JOIN               
-- RIGHT EXCLUSIVE JOIN= RETURNS ROW VALUES  WHICH WORKS OPPISTE TO LEFT INNER JOIN         


-- LEFT EXCLUSIVE JOIN

SELECT * FROM COL AS A LEFT JOIN COU AS B
ON A.ID=B.C_ID
WHERE B.C_ID IS NULL;
-- RETURN THE VALUES FROM TABLE A(LEFT TABLE) WHICH DOESN'T MATCH WITH TABLE B


-- RIGHT EXCLUSIVE JOIN

SELECT * FROM COL AS A RIGHT JOIN COU AS B
ON A.ID=B.C_ID
WHERE A.ID IS NULL;
-- RETURN THE VALUES FROM TABLE B(RIGHT TABLE) WHICH DOESN'T MATCH WITH TABLE A

                       
SELECT * FROM COL AS A LEFT JOIN COU AS B
ON A.ID=B.C_ID
WHERE B.C_ID IS NULL
UNION 
SELECT * FROM COL AS A RIGHT JOIN COU AS B
ON A.ID=B.C_ID
WHERE A.ID IS NULL;
-- RETURNS DOESN'T MATCHED ROWS FROM 2 TABLES(OPPOSITE TO INTERSECTION)

-- SELF JOIN= TABLES JOINS WITH IT OWN SELF
ALTER TABLE COL
ADD VAYA INT;

ALTER TABLE COL
DROP AGE;

UPDATE COL
SET VAYA=3 WHERE ID=1;
UPDATE COL
SET VAYA=2 WHERE ID=2;
UPDATE COL
SET VAYA=5 WHERE ID=3;
UPDATE COL
SET VAYA=1 WHERE ID=4; 
UPDATE COL
SET VAYA=2 WHERE ID=5;

SELECT * FROM COL;
          
SELECT A.ID,A.NAAM,A.VAYA,B.VAYA FROM COL AS A JOIN COL AS B
ON A.ID=B.VAYA;   
-- UNION = EVERY SELECT SHOULD HAVE SAME NO.OF COLUMNS  ,  COLUMNS SHOULD HAVE SIMILAR DATA TYPES , COLUMNS SHOULD HAVE ASME ORDER 

                                       -- SUB QUERIES
                                       
--  FROM
--  WHERE
--  SELECT

USE SEEK;  

CREATE TABLE S(
    ID INT PRIMARY KEY,
    FNAAM VARCHAR(50),
    LNAAM VARCHAR(50),
    AGE INT,
    DEPT VARCHAR(100)
);                      
INSERT INTO S(ID,FNAAM,LNAAM,AGE,DEPT) VALUES
(1, 'John', 'Doe', 20, 'Computer Science'),
(2, 'Jane', 'Smith', 22, 'Mathematics'),
(3, 'Emily', 'Johnson', 19, 'Biology'),
(4, 'Michael', 'Williams', 21, 'Physics'),
(5, 'Sarah', 'Brown', 23, 'Chemistry');

SELECT * FROM S;

SELECT LNAAM,AGE FROM S
WHERE AGE>(SELECT AVG(AGE) FROM S);

SELECT  ID,LNAAM  FROM S
WHERE ID IN
(SELECT ID FROM S
WHERE ID%2=0); -- RETURNS ID,NAAM OF EVEN ROLL NO'S

SELECT MAX(AGE) 
FROM (SELECT * FROM S WHERE DEPT="CHEMISTRY") AS A;

SELECT ( SELECT MAX( AGE) FROM S),LNAAM FROM S;

                     -- VIEWS IN SQL
                     
-- VIEWS ARE VIRTUAL .
-- NEEDED COLUMN VALUES ARE TAKEN FROM A TABLE AND ACTIONS ARE PERFORMES ON VIEWS.
-- ACTIONS PERFORMED DOEN'T AFFECT ANY CHANGES TO TABLE DATA

SELECT * FROM S;       

CREATE VIEW ONE AS SELECT ID,AGE FROM S;
SELECT * FROM ONE;-- ( CAN PERFORM  QUERIES ON VIEWS JUST LIKE WE DO ON TABLES)
DROP VIEW ONE;

SELECT * FROM S
WHERE LNAAM LIKE "S%";

SELECT * FROM S
WHERE LNAAM LIKE "_%S";

SHOW DATABASES;

USE SEEK;
CREATE TABLE EMP (
    ID INT PRIMARY KEY,
    NAAM VARCHAR(100),
    SAL DECIMAL(10, 2),
    DEPT VARCHAR(50),
    LOC VARCHAR(100)
);
INSERT INTO EMP (ID, NAAM, SAL, DEPT, LOC) VALUES
(1, 'Alice Smith', 75000.00, 'HR', 'New York'),
(2, 'Bob Johnson', 68000.00, 'Finance', 'Los Angeles'),
(3, 'Charlie Brown', 72000.00, 'IT', 'Chicago'),
(4, 'Diana Prince', 85000.00, 'Marketing', 'San Francisco'),
(5, 'Ethan Hunt', 90000.00, 'Operations', 'Miami'),
(6, 'Fiona Gallagher', 67000.00, 'HR', 'Boston'),
(7, 'George Clooney', 95000.00, 'Finance', 'Seattle'),
(8, 'Hannah Baker', 62000.00, 'IT', 'Austin'),
(9, 'Ian Malcolm', 71000.00, 'Marketing', 'Denver'),
(10, 'Jane Doe', 80000.00, 'Operations', 'Atlanta');


SELECT MAX(SAL) FROM EMP;

SELECT MAX(SAL) FROM emp
WHERE SAL<(SELECT MAX(SAL) FROM EMP); -- 2ND HIGHSEDT SALARY

SELECT MAX(SAL),DEPT FROM emp
GROUP BY DEPT;

SELECT NAAM,COUNT(*) FROM EMP
GROUP BY NAAM
HAVING COUNT(*)>1 
ORDER BY NAAM DESC;


SELECT NAAM FROM EMP
WHERE NAAM LIKE 'A%';

SELECT NAAM FROM EMP
WHERE NAAM LIKE '%A';

SELECT NAAM FROM EMP
WHERE NAAM LIKE  '%M%';

SELECT NAAM FROM EMP
WHERE NAAM NOT LIKE '%M%';
SELECT * FROM EMP;

SELECT NAAM FROM EMP
WHERE NAAM LIKE'____';

SELECT NAAM FROM EMP 
WHERE NAAM LIKE '_A_M%';


SELECT NAAM,DATES FROM EMP
WHERE DATES LIKE '%DEC%';

SELECT NAAM FROM EMP
WHERE NAAM LIKE '__';

SELECT NAAM FROM EMP
WHERE NAAM LIKE '%AA%';

SELECT * FROM EMP;

SELECT NAAM FROM EMP
WHERE NAAM LIKE 'A%H';

select  * FROM EMP
WHERE ID=4;
SELECT * FROM EMP
LIMIT 1 OFFSET 3;

                                                      -- SUB QUERIES PRACTICE
SELECT * FROM EMP;

SELECT NAAM,SAL  FROM EMP
WHERE SAL>(SELECT AVG(SAL) FROM EMP);


      SELECT CURRENT_TIMESTAMP; 
      SELECT current_date();
      select current_time();

                                 -- SCALAR SUB QUERY
-- IT ALWAYS RETURNS ONE ROW AND ONE COLUMN    

                                   --  correlated sub query

SELECT * FROM EMP;
DROP TABLE   EMP;
rollback;